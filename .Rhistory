)
}
if (interactive()) {
# Display an important message that can be dismissed only by clicking the
# dismiss button.
shinyApp(
ui = basicPage(
actionButton("show", "Show modal dialog")
),
server = function(input, output) {
observeEvent(input$show, {
showModal(modalDialog(
title = "Important message",
"This is an important message!"
))
})
}
)
}
}
##Script para rodar experimentos em parcela subsubdividida
library(xlsx)
X <- read.xlsx(file.choose(), sheetIndex = 1) ##Acha o arquivo no computador
X <- X[1:64,] ##Seleciona as 64 primeiras linhas [Remove o final nulo]
str(X)
cat("\n","************************************************************** ","\n")
cat("************************************************************** ", "\n")
cat("Data da Analise:", date(), "\n")
Par<-as.factor(X[,1]) ##Define Epoca como Parcela
Sub<-as.factor(X[,2]) ##Define Material como Sub
SubSub<-as.factor(X[,3]) ## Define a subsub
Bloco<-as.factor(X[,4]) ## Define bloco
##Script para rodar experimentos em parcela subsubdividida
library(xlsx)
X <- read.xlsx(file.choose(), sheetIndex = 1) ##Acha o arquivo no computador
X <- X[1:64,] ##Seleciona as 64 primeiras linhas [Remove o final nulo]
str(X)
cat("\n","************************************************************** ","\n")
cat("************************************************************** ", "\n")
cat("Data da Analise:", date(), "\n")
Par<-as.factor(X[,1]) ##Define Epoca como Parcela
Sub<-as.factor(X[,2]) ##Define Material como Sub
SubSub<-as.factor(X[,3]) ## Define a subsub
Bloco<-as.factor(X[,4]) ## Define bloco
col_inicial<-5 ## Começa a análise a partir da quinta coluna [Para rodar tudo]
cat("==============================================================","\n")
cat("Modelo: Y =m + Pi +Ea +Sj + PSij +Eb + Ss +PSs +SSs+PSSs + Ec","\n")
cat("==============================================================","\n")
for (i in col_inicial:ncol(X))
{
cat("--------------------------------------------------------------","\n")
cat("Variavel = ",i-col_inicial+1, "    ", colnames(X)[i],"\n")
cat("--------------------------------------------------------------","\n")
cat("\n")
cat("-----ANOVA:","\n")
saida<-aov(X[,i]~Bloco + Par*Sub*SubSub + Error(Bloco/Par/Sub))
print(summary(saida))
cat("\n", "Teste de Normalidade","\n")
saidaNormalidade<-aov(X[,i]~Bloco + Par*Sub*SubSub+ Bloco:Par/Sub)
resid<-residuals(saidaNormalidade)
bartlett.test(resid, SubSub)
testeN<- shapiro.test (resid)
print(testeN)
cat("--Interpretacao:  ","\n")
cat("p-value < 0.05: Significativo a 5% (*)- Rejeita H0 a 5%","\n")
cat("H0: A amostra provem de uma populacao normal","\n")
cat("-----","\n")
cat("\n")
##Calculando estat?sticas gerais
cat("-----Estatisticas Gerais:","\n")
media<-mean(X[,i], na.rm=TRUE)
cat("Media Geral:",media,"\n")
cvE <- (100*sqrt(4404))/media
cat("cv (%):", cvE,"\n")
min <- min(X[,i], na.rm=TRUE)
cat("Minimo:", min,"\n")
max <- max(X[,i], na.rm=TRUE)
cat("Maximo:", max,"\n")
cat("-----","\n")
cat("\n")
cat("\n")
cat("------ Saida Grafica","\n")
cat("\n")
cat("----- Grafico das variaveis","\n")
cat("\n")
par(mfrow=c(2,2))
cat("--- Pagina 1 - Grafico [1,1]: Boxplot da variavel vs Parc","\n")
boxplot(X[,i]~Par, ylab=colnames(X)[i], col=gray.colors(length(X[,i])))
par(mfrow=c(1,3))
cat("--- Pagina 1 - Grafico [1,2]: Boxplot da variavel vs Sub","\n")
boxplot(X[,i]~Sub, ylab=colnames(X)[i], col=gray.colors(length(X[,i])))
par(mfrow=c(1,3))
cat("--- Pagina 1 - Grafico [2,1]: Boxplot da variavel vs SubSub","\n")
boxplot(X[,i]~SubSub, ylab=colnames(X)[i], col=gray.colors(length(X[,i])))
cat("--- Pagina 2 - Grafico [2,2]: Histograma","\n")
hist(X[,i], col=gray.colors(length(X[,i])), xlab= colnames(X)[i])
cat("\n")
cat("----- Grafico para avaliar pressuposicoes da anova","\n")
cat("\n")
cat("--- Pagina 2 - Grafico [1,1]: Superior Esquerdo:","\n")
cat("Auxiliar na analise da homogeneidade de variancia e pontos discrepantes","\n")
cat("Desejavel: Pontos dispersos em tornos do 0. 95% entre -2 e 2; acima de -3 e 3 outlier","\n")
cat("\n")
cat("--- Pagina 2 - Grafico [1,2]: Superior Direito:","\n")
cat("Auxiliar na analise da normalidade do residuo","\n")
cat("Desejavel: Pontos dispersos ao longo da reta","\n")
cat("\n")
cat("--- Pagina 2 - Grafico [2,2]: Inferior Direito:","\n")
cat("Auxiliar na analise da homogeneidade de variancia","\n")
cat("Desejavel: Pontos dispersos em tornos do 0. 95% entre -2 e 2; acima de -3 e 3 outlier","\n")
cat("\n")
par(mfrow=c(2,2))
plot(saidaNormalidade)
}
X <- read.xlsx(file.choose(), sheetIndex = 1) ##Acha o arquivo no computador
X <- X[1:64,]
str(X)
str(X)
library(AgroR)
attach(dados)
with(X, PSUBSUBDBC(EPOCA, MATERIAL, DOSES, BLOCO,ICF,alpha.f = 0.05,
alpha.t = 0.05)) ## Aqui vc substitui o nome da variavel - aqui está PROD, vc pode substituir
library(agricolae)
### Em caso de necessidade de transformação - (Quando - bartlett teste < 0.05 ou shapiro.test < 0.05)
### vc pode adicionar diretamente na função sqrt(nome da variável) ou
## log(nome da variável)
with(EYM, PSUBSUBDBC(EPOCA, MATERIAl, DOSE, Bloco,sqrt(ICF),alpha.f = 0.05,
alpha.t = 0.05))
model<- lm(ICF ~ EPOCA, data = X)
anova <- aov(model)
PlantGrowth
tukey.test <- HSD.test(model, trt = 'EPOCA')
tukey.test
library(AgroR)
library(read_xlsx)
X <- read.xlsx(file.choose(), sheetIndex = 1) ##Acha o arquivo no computador
X <- read.xlsx("C:/RBase/BERTOL/EYM.xlsx", sheetIndex = 1) ##Acha o arquivo no computador
X <- X[1:64,]
str(X)
attach(dados)
attach(X)
with(X, PSUBSUBDBC(EPOCA, MATERIAL, DOSES, BLOCO,ICF,alpha.f = 0.05,
alpha.t = 0.05)) ## Aqui vc substitui o nome da variavel - aqui está PROD, vc pode substituir
saida<-aov(ICF~BLOCO + EPCOA*MATERIAl*DOSES + Error(BLOO/EPOCA/MATERIAL))
saida<-aov(ICF~BLOCO + EPCOA*MATERIAl*DOSES + Error(BLOCO/EPOCA/MATERIAL))
saida<-aov(ICF~BLOCO + EPOCA*MATERIAl*DOSES + Error(BLOCO/EPOCA/MATERIAL))
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
library(read_xlsx)
library(read_xlsx)
saida<-aov(ICF~BLOCO + EPOCA*MATERIAL*DOSES + Error(BLOCO/EPOCA/MATERIAL))
anova(saida)
anova(saida)
saida<-aov(ICF~BLOCO + EPOCA*MATERIAL*DOSES + Error(BLOCO/EPOCA/MATERIAL))
saida
bartlett.test(residuals(saida), saida)
bartlett.test(residuals(saida), EPOCA)
norm=shapiro.test(saida$residuals)
saida<-aov(ICF~BLOCO + EPOCA*MATERIAL*DOSES + Error(BLOCO/EPOCA/MATERIAL))
m1=aov(ICF~EPOCA*MATERIAL*DOSES+BLOCO/EPOCA+BLOCO/EPOCA/MATERIAL)
norm=shapiro.test(m1$residuals)
norm
homog=bartlett.test(m1$residuals~paste(Fator1,Fator2,Fator3))
homog=bartlett.test(m1$residuals~paste(EPOCA,MATERIAL,DOSES))
homog
with(X, PSUBSUBDBC(EPOCA, MATERIAL, DOSES, BLOCO,ICF,alpha.f = 0.05,
alpha.t = 0.05)) ## Aqui vc substitui o nome da variavel - aqui está PROD, vc pode substituir
m1=aov(ICF~EPOCA*MATERIAL*DOSES+BLOCO/EPOCA+BLOCO/EPOCA/MATERIAL)
norm=shapiro.test(m1$residuals)
norm
saida<-aov(ICF~BLOCO + EPOCA*MATERIAL*DOSES + Error(BLOCO/EPOCA/MATERIAL))
summary(saida)
normalidade <- shapiro.test(residuals(saida))
normalidade <- shapiro.test(saida$residuals)
resid(saida)
saidaNormalidade<-aov(ICF~BLOCO + EPOCA*MATERIAL*DOSES+ BLOCO:EPOCA/MATERIAL)
resid<-residuals(saidaNormalidade)
resid
shapiro.test(resid)
homog=bartlett.test(saidaNormalidade$residuals~paste(EPOCA,MATERIAL,DOSES))
homog
homog=bartlett.test(saidaNormalidade$residuals~paste(EPOCA,MATERIAL,DOSES))
homog
saida<-aov(ICF~BLOCO + EPOCA*MATERIAL*DOSES + Error(BLOCO/EPOCA/MATERIAL))
print(summary(saida))
cat("\n", "Teste de Normalidade","\n")
saidaNormalidade<-aov(ICF~BLOCO + EPOCA*MATERIAL*DOSES+ BLOCO:EPOCA/MATERIAL)
resid<-residuals(saidaNormalidade)
shapiro.test(resid)
with(X, PSUBSUBDBC(EPOCA, MATERIAL, DOSES, BLOCO,ICF,alpha.f = 0.05,
alpha.t = 0.05)) ## Aqui vc substitui o nome da variavel - aqui está PROD, vc pode substituir
saidaNormalidade<-aov(ICF~BLOCO + EPOCA*MATERIAL*DOSES+ BLOCO:EPOCA/MATERIAL)
resid<-residuals(saidaNormalidade)
shapiro.test(resid)
norm=shapiro.test(m1$residuals)
norm
homog=bartlett.test(saidaNormalidade$residuals~paste(EPOCA,MATERIAL,DOSES))
homog
X <- read.xlsx("C:/RBase/BERTOL/EYM.xlsx", sheetIndex = 1) ##Acha o arquivo no computador
X <- X[1:64,]
str(X)
attach(X)
library(AgroR)
library(read_xlsx)
X <- read.xlsx("C:/RBase/BERTOL/EYM.xlsx", sheetIndex = 1) ##Acha o arquivo no computador
X <- X[1:64,]
str(X)
attach(X)
gc()
BLOCO
library(shiny)
library(shiny)
# DATA ----
db_connection <- DBI::dbConnect(
odbc::odbc(),
"DS",
uid = "ml_tmgdev",
pwd = "7G5k9QpHQYDnCTvv"
)
# DATA ----
db_connection <- DBI::dbConnect(
odbc::odbc(),
"Snowflake",
uid = "ml_tmgdev",
pwd = "7G5k9QpHQYDnCTvv"
)
# DATA ----
db_connection <- DBI::dbConnect(
odbc::odbc(),
"DS",
uid = "ml_tmgdev",
pwd = "7G5k9QpHQYDnCTvv"
)
library(tidyverse)
library(rlist)
library(tidytable)
library(openxlsx)
library(DBI)
library(timetk)
library(lubridate)
library(gslnls)
library(plotly, include.only = "ggplotly")
SCENARIOS <- c("avg", "low", "high")
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
min_max_inv <- function(x, vmin, vmax) {
x * (vmax - vmin) + vmin
}
fit_life_cycle_curve <- function(prod_tbl, alpha = 0.2) {
vmin <- min(prod_tbl$prod)
vmax <- max(prod_tbl$prod)
model_gsl <- tryCatch(
{
gsl_nls(
fn = y ~ b1 / b2 * exp(-0.5 * ((x - b3) / b2) ^ 2),
data = data.frame(
x = seq_along(prod_tbl$crop_year),
y = min_max_norm(prod_tbl$prod)
),
start = c(b1 = 1, b2 = 1, b3 = 1)
)
},
error = function(e) {
trapezoid <- function(x) {
dat <- data.frame(
x = seq_along(prod_tbl$crop_year),
y = min_max_norm(prod_tbl$prod)
)
xx   <- dat$x
N    <- length(xx)
yy   <- rep(0, N)
c    <- -abs(x[3])
a    <- abs(x[1])
b    <- x[2]
tau1 <- x[4]
t1   <- abs(tau1)
tau2 <- x[5] + tau1
t2   <- abs(tau2)
yy[1:as.integer(t1)] <- a * xx[1:as.integer(t1)] + b
yy[(as.integer(t1) + 1):as.integer(t2)] <-  a * tau1 + b
yy[(as.integer(t2) + 1):N] <-
c * (xx[(as.integer(t2) + 1):N] - tau2) + (a * tau1 + b)
yy <- ifelse(yy < 0, 0, yy)
return(yy)
}
## Model as a function
gsl_nls(
fn        = trapezoid, ## model function
y         = min_max_norm(prod_tbl$prod), ## response vector
start     = c(x1 = 2/7, x2 = 0.1, x3 = 0.5/3,
x4 = 3, x5 = 2), ## starting values
algorithm = "lm" ## algorithm
)
}
)
model_summary <- summary(model_gsl)
conf_interval <- confint(model_gsl)
fore <- min_max_inv(
predict(model_gsl, interval = "prediction", level = (1 - alpha))[, 1],
vmin = vmin,
vmax = vmax
)
fore_low <- min_max_inv(
predict(model_gsl, interval = "prediction", level = (1 - alpha))[, 2],
vmin = vmin,
vmax = vmax
)
fore_high <- min_max_inv(
predict(model_gsl, interval = "prediction", level = (1 - alpha))[, 3],
vmin = vmin,
vmax = vmax
)
full_data_tbl <- tibble(
date      = prod_tbl$crop_year,
volume_sc = prod_tbl$prod
) %>%
mutate(fore = NA, fore_low = NA, fore_high = NA)
full_data_tbl[, "fore"]      <- fore
full_data_tbl[, "fore_low"]  <- ifelse(fore_low < 0, 0, fore_low)
full_data_tbl[, "fore_high"] <- fore_high
full_data_tbl <- full_data_tbl %>% pivot_longer(-date)
g <- full_data_tbl %>%
plot_time_series(
.date_var    = date,
.value       = value,
.color_var   = name,
.smooth      = FALSE,
.interactive = FALSE
)
return(
list(
model   = model_gsl,
summary = model_summary,
confint = conf_interval,
v_min   = vmin,
v_max   = vmax,
data    = full_data_tbl,
plot    = ggplotly(g)
)
)
}
fit_life_cycle_curve_safe <- possibly(fit_life_cycle_curve, NULL)
forecast_from_fitted_curve <- function(
life_cycle_fit,
h     = 10,
alpha = 0.2,
kind  = "most_likely"
) {
# Forecasting
crop_year <- life_cycle_fit$data$date %>%
unique()
x <- length(crop_year)
which_pred <- switch (kind,
"low"  = 2,
"high" = 3,
1
)
fore <- min_max_inv(
x = predict(
object   = life_cycle_fit$model,
interval = "prediction",
level    = (1 - alpha),
newdata  = data.frame(x = 1:h + rep(x, h))
)[, which_pred],
vmin = life_cycle_fit$v_min,
vmax = life_cycle_fit$v_max
)
# Life cycle time
xnew <- 1:h + rep(x, h)
x <- 1:x
kind <- c(
rep("actual", length(x)),
rep("forecast", length(xnew))
)
x <- c(x, xnew)
y <- life_cycle_fit$data %>% filter(name == "volume_sc") %>% pull(value)
y <- c(y, fore)
# if needed, adjust x's length
x <- x[1:length(y)]
crop_year <- c(crop_year, rep(tail(crop_year, 1), h) + 1:h) %>%
.[1:length(y)]
dat <- tibble(period = x, crop_year = crop_year,
volume_sc = y, kind = kind[1:length(y)])
# life cycle time estimate
n_max <- which.max(y) + 1
y <- y[n_max:length(y)]
x <- x[n_max:length(x)]
y <- y[y > 0.5]
x <- x[1:length(y)]
mod <- lm(x ~ y)
life_cycle_time <- floor(predict(mod, newdata = data.frame(y=0)))
life_cycle_time <- min(life_cycle_time, 15)
if (length(life_cycle_time) == 0) {
life_cycle_time <- length(dat$volume_sc)
}
if (life_cycle_time < length(dat$volume_sc)) {
dat$volume_sc[life_cycle_time:length(dat$volume_sc)] <- 0
}
return(
list(
life_cycle_time = life_cycle_time,
forecast        = dat
)
)
}
forecast_from_fitted_curve_safe <- possibly(forecast_from_fitted_curve, NULL)
fix_bad_forecast <- function(forecast_obj, alpha = 0.2) {
forecast_obj %>%
filter(kind == "actual") -> actual_data
forecast_obj %>%
filter(kind != "actual") %>%
filter(volume_sc > 0) %>%
pull(volume_sc) %>%
round(1) -> fore_values
(diff(actual_data$volume_sc) > lag(diff(actual_data$volume_sc))) %>%
tail(1) -> bad_criteria_1
bad_criteria_2 <- all(mean(fore_values) == fore_values)
(fore_values == lag(fore_values)) %>%
sum(na.rm = TRUE) %>%
">="(2) -> bad_criteria_3
bad_time_series <- bad_criteria_1 || bad_criteria_2 || bad_criteria_3
if (bad_time_series) {
mod <- gsl_nls(
fn = y ~ b1 / b2 * exp(-0.5 * ((x - b3) / b2) ^ 2),
data = data.frame(
x = c(actual_data$period, (length(fore_values) + 2)),
y = min_max_norm(c(actual_data$volume_sc, 0))
),
start = c(b1 = 1, b2 = 1, b3 = 1)
)
# Forecasting
h <- nrow(forecast_obj)
x <- length(actual_data$period)
fore <- min_max_inv(
x = predict(
object   = mod,
interval = "prediction",
level    = (1 - alpha),
newdata  = data.frame(x = 1:h + rep(x, h))
)[, 1],
vmin = 0,
vmax = max(actual_data$volume_sc)
)
vols <- c(actual_data$volume_sc, fore)[1:nrow(forecast_obj)]
vols <- ifelse(vols < 0, 0, vols)
forecast_obj$volume_sc <- vols %>% round(1)
}
return(forecast_obj)
}
db_connection <- DBI::dbConnect(
odbc::odbc(),
"DS",
uid = "ml_tmgdev",
pwd = "7G5k9QpHQYDnCTvv"
)
im_tbl <- DBI::dbGetQuery(
db_connection,
"SELECT * FROM TMG_DATALAKE_DEV.TMG_TD_HECTOR_LAKE.TBL_PESQUISA_MERCADO"
)
im_tbl
dbDisconnect(db_connection)
im_tbl <- janitor::clean_names(im_tbl)
certified_seed <- im_tbl$seed_type %>%
str_detect(pattern = "(^Certified)|(Certificado$)|(^Certificado)")
im_tbl$seed_type[certified_seed]  <- "Certified seed"
im_tbl$seed_type[!certified_seed] <- "Non Certified seed"
setwd("C:/RBase/Modelo_padrao_input")
library(xlsx)
library(openxlsx)
library(tidyverse)
library(AgroR)
### Carregando arquivo de dados
dados <- read.xlsx("DADOS.xlsx")
View(dados)
### ACESSANDO GRUPOS
GRUPOS <- as.factor(dados$PRAGA)
TRAT <- as.factor(dados$Trat)
PONTO <- as.factor(dados$Ponto)
DATA <- as.factor(dados$DATA2)
VAR <- as.integer(dados$N_lagartas)
## COMPILANDO DATAFRAME
DF <- data.frame(GRUPOS, TRAT, PONTO, DATA, VAR)
for(i in 1:length(levels(DF$GRUPOS))){ #1
j = 1
l = 1
for(j in 1:length(levels(DF$DATA))){ ##1
SAIDA <- NULL
MEDIAS <- NULL
RESULT <- NULL
letras <- NULL
BASE_FILTRO <- filter(DF, GRUPOS == levels(DF$GRUPOS)[i], DATA == levels(DF$DATA)[j])
cat("Resultado - ")
cat("\n")
MEDIAS <- aggregate(VAR ~ TRAT, FUN = mean, data = BASE_FILTRO)
X <- DBC.glm(BASE_FILTRO$TRAT, BASE_FILTRO$PONTO, BASE_FILTRO$VAR, glm.family = "poisson")
for(l in 1:length(levels(DF$TRAT))){
letras <- c(letras, data.frame(strsplit(X$data$letra, " "))[2,l])
}
cat("\n")
cat("\n")
cat("Resultado final para:")
cat("GRUPO: ")
print(levels(DF$GRUPOS)[i])
cat("DATA: ")
print(levels(DF$DATA)[j])
RESULT <- data.frame(TRAT = X$data$trat, Letras = letras)
cat("\n")
cat("\n")
SAIDA <- merge(MEDIAS, RESULT)
print(SAIDA)
}
}
